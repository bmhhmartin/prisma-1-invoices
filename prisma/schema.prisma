// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}




model products{
  id                        BigInt     @id @default(autoincrement())
  name                      String
  price                     String
  unit                      String 
  img_url                   String
  created_at                DateTime   @default(now()) @db.Timestamp(0)
  updated_at                DateTime   @default(now()) @db.Timestamp(0)
  user_id                   BigInt
  user                      user @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  category_id               BigInt
  categories                categories @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  invoice_products          invoice_products[]
}

model categories{
  id                        BigInt     @id @default(autoincrement())
  name                      String
  created_at                DateTime   @default(now()) @db.Timestamp(0)
  updated_at                DateTime   @default(now()) @db.Timestamp(0)
  products                  products[]
  user_id                   BigInt
  user                      user @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade) 
}

model user{
  id                        BigInt @id @default(autoincrement())
  firstName                 String
  lastName                  String
  email                     String @unique
  mobile                    String
  password                  String
  otp                       String
  created_at                DateTime  @default(now()) 
  updated_at                DateTime  @updatedAt
  products                  products[]
  categories                categories[]
  customers                 customers[]
  invoices                  invoices[]
  invoice_products          invoice_products[]
}


model customers{
  id                        BigInt     @id @default(autoincrement())
  name                      String
  email                     String
  mobile                    String
  created_at                DateTime   @default(now()) @db.Timestamp(0)
  updated_at                DateTime   @default(now()) @db.Timestamp(0)
  user_id                   BigInt
  user                      user @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  invoices                  invoices[]
}



model invoices{
  id                        BigInt     @id @default(autoincrement())
  total                     String
  discount                  String
  vat                       String
  payable                   String
  created_at                DateTime   @default(now()) @db.Timestamp(0)
  updated_at                DateTime   @default(now()) @db.Timestamp(0)
  user_id                   BigInt
  user                      user @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  customer_id               BigInt
  customers                 customers @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  invoice_products          invoice_products[]
}


model invoice_products{
  id                        BigInt     @id @default(autoincrement())
  qty                       String
  sales_price               String
  created_at                DateTime   @default(now()) @db.Timestamp(0)
  updated_at                DateTime   @default(now()) @db.Timestamp(0)
  user_id                   BigInt
  user                      user @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  invoice_id                BigInt
  invoices                  invoices @relation(fields: [invoice_id], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  product_id                BigInt
  products                  products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade) 
}




